<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Camalot.Common</name>
    </assembly>
    <members>
        <member name="M:Camalot.Common.Arguments.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Arguments"/> class.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Camalot.Common.Arguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Arguments"/> class.
            </summary>
        </member>
        <member name="M:Camalot.Common.Arguments.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Camalot.Common.Arguments.Get(System.String)">
            <summary>
            Gets the specified param value.
            </summary>
            <param name="param">The param.</param>
            <returns>The value of the param.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If it does not contain the specified param.</exception>
        </member>
        <member name="M:Camalot.Common.Arguments.Get(System.String[])">
            <summary>
            Gets the value of a param from the specified paramlist.
            </summary>
            <param name="paramlist">The paramlist.</param>
            <returns>The value of the param.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If it does not contain the specified param.</exception>
        </member>
        <member name="M:Camalot.Common.Arguments.ContainsKey(System.String)">
            <summary>
            Determines whether this instance contains the specified key.
            </summary>
            <param name="param">The param.</param>
            <returns>
            	<c>true</c> if this instance contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Camalot.Common.Arguments.ContainsKey(System.String[])">
            <summary>
            Determines whether this instance contains any of the params in the specified param list.
            </summary>
            <param name="paramlist">The paramlist.</param>
            <returns>
            	<c>true</c> if this instance contains any of the params in the specified param list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Camalot.Common.Arguments.ContainsValue(System.String)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Camalot.Common.Arguments.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Camalot.Common.Arguments.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified param.
            </summary>
            <value></value>
            <exception cref="T:System.IndexOutOfRangeException">If it does not contain the specified param.</exception>
        </member>
        <member name="P:Camalot.Common.Arguments.Item(System.String[])">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified paramlist.
            </summary>
            <value></value>
            <exception cref="T:System.IndexOutOfRangeException">If it does not contain the specified param.</exception>
        </member>
        <member name="P:Camalot.Common.Arguments.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Camalot.Common.Arguments.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Camalot.Common.Arguments.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Camalot.Common.Attributes.ConfigurationPathAttribute">
            <summary>
            A helper attribute for defining configuration elements in the web config.
            </summary>
            <gist id="6fc378fae7d7a51c58a1">Define the configuration</gist>
            <gist id="6214ba8cf5bc2eabeb45">Define the xml configuration in the app/web config file</gist>
            <gist id="eab0e87c8adf9548d41f">Load the configuration</gist>
            <see cref="T:Camalot.Common.Configuration.ConfigurationReader"/>
        </member>
        <member name="M:Camalot.Common.Attributes.ConfigurationPathAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Attributes.ConfigurationPathAttribute"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:Camalot.Common.Attributes.ConfigurationPathAttribute.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:Camalot.Common.Attributes.EnumDisplayAttribute">
            <summary>
            An attribute to give an enum a display value
            </summary>
            <gist id="754edf4379b8d4e57cd4" />
        </member>
        <member name="P:Camalot.Common.Attributes.EnumDisplayAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Camalot.Common.Attributes.EnumIgnoreAttribute">
            <summary>
            An attribute to specify that an enum should be ignored when looking at the enums via reflection. 
            </summary>
            <gist id="754edf4379b8d4e57cd4" />
        </member>
        <member name="T:Camalot.Common.Attributes.EnumValueAttribute">
            <summary>
            An attribute that gives an enum a string value to use.
            </summary>
            <gist id="754edf4379b8d4e57cd4" />
        </member>
        <member name="P:Camalot.Common.Attributes.EnumValueAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Camalot.Common.Comparers.Comparer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Camalot.Common.Comparers.Comparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Comparers.Comparer`1"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:Camalot.Common.Comparers.Comparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="M:Camalot.Common.Comparers.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Comparers.LambdaComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:Camalot.Common.Comparers.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Comparers.LambdaComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Camalot.Common.Comparers.LambdaComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T" /> to compare.</param>
            <param name="y">The second object of type <paramref name="T" /> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Camalot.Common.Comparers.LambdaComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Camalot.Common.Configuration.ConfigurationReader">
            <summary>
            Gets a configuration object from the configuration context.
            </summary>
            <gist id="6fc378fae7d7a51c58a1">Define the configuration</gist>
            <gist id="6214ba8cf5bc2eabeb45">Define the xml configuration in the app/web config file</gist>
            <gist id="eab0e87c8adf9548d41f">Load the configuration</gist>
            <see cref="T:Camalot.Common.Attributes.ConfigurationPathAttribute"/>
        </member>
        <member name="T:Camalot.Common.Configuration.IConfigurationReader">
            <summary>
            Gets a configuration object from the configuration context.
            </summary>
        </member>
        <member name="M:Camalot.Common.Configuration.IConfigurationReader.Get``1">
            <summary>
            Gets a configuration object from the configuration context.
            </summary>
            <typeparam name="T">The configuration object to get from the context.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Configuration.ConfigurationReader.Get``1">
            <summary>
            Gets a configuration object from the configuration context.
            </summary>
            <typeparam name="T">The configuration object to get from the context.</typeparam>
            <returns></returns>
            <gist id="eab0e87c8adf9548d41f">Load the configuration</gist>
            <see cref="T:Camalot.Common.Attributes.ConfigurationPathAttribute"/>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets all types that have the specified attribute
            </summary>
            <typeparam name="T">The attribute.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <gist id="41883d902a6ed6bd8da4">This sample shows AppDomain, but works the same for assemblies as well.</gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetTypesThatAre``1(System.Reflection.Assembly)">
            <summary>
            Gets the types that are assignable from TType.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <gist id="6e8707f256ad0398cbff">This sample shows AppDomain, but works the same for assemblies as well.</gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Gets the loadable types.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>Returns an IEnumerable of Types that can be loaded.</returns>
            
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Gets the string representation of the array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetString(System.Byte[])">
            <summary>
            Gets the string representation of the array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts the byte array to a base64 encoded string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToHex(System.Byte[])">
            <summary>
            Converts the byte array to a hexadecimal string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToHex(System.Byte)">
            <summary>
            Converts the byte array to a hexadecimal string.
            </summary>
            <param name="b">The byte array.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.AsStream(System.Byte[])">
            <summary>
            Turns the byte array in to a Stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.AsStream(System.Byte[],System.Boolean)">
            <summary>
            Turns the byte array in to a Stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="writable">if set to <c>true</c> then the stream is writable.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.AsStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Turns the byte array in to a Stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.AsStream(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Turns the byte array in to a Stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="writable">if set to <c>true</c> then the stream is writable.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Compress(System.Byte[])">
            <summary>
            Compresses the bytes using GZIP compression.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CompressAsync(System.Byte[])">
            <summary>
            Compresses the bytes using GZIP compression.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Decompress(System.Byte[])">
            <summary>
            Decompresses the GZIP byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.DecompressAsync(System.Byte[])">
            <summary>
            Decompresses the GZIP byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToList(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Converts the capture collection to a list of capture items.
            </summary>
            <param name="captures">The captures.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToArray(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Converts the capture collection to an array of capture items.
            </summary>
            <param name="captures">The captures.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ForEach(System.Text.RegularExpressions.CaptureCollection,System.Action{System.Text.RegularExpressions.Capture})">
            <summary>
            Enumerate through each Capture.
            </summary>
            <param name="captures">The Captures.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ForEach(System.Text.RegularExpressions.CaptureCollection,System.Func{System.Text.RegularExpressions.Capture,System.Boolean},System.Action{System.Text.RegularExpressions.Capture})">
            <summary>
            Enumerate through each Capture.
            </summary>
            <param name="captures">The Captures.</param>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.First(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Gets the first match Capture from the specified match.
            </summary>
            <param name="g">The Capture collection.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.First(System.Text.RegularExpressions.CaptureCollection,System.Func{System.Text.RegularExpressions.Capture,System.Boolean})">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="g">The capture collection.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrDefault(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="c">The capture collection.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrDefault(System.Text.RegularExpressions.CaptureCollection,System.Func{System.Text.RegularExpressions.Capture,System.Boolean})">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="c">The capture collection.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Single(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="c">The capture collection.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Single(System.Text.RegularExpressions.CaptureCollection,System.Func{System.Text.RegularExpressions.Capture,System.Boolean})">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="c">The g.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrDefault(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="c">The g.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrDefault(System.Text.RegularExpressions.CaptureCollection,System.Func{System.Text.RegularExpressions.Capture,System.Boolean})">
            <summary>
            Gets the first match capture from the specified match.
            </summary>
            <param name="c">The capture collection.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToHtmlHex(System.Drawing.Color)">
            <summary>
            Transforms the Color to an HTML hexadecimal string (#FFFFFF).
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToColor(System.String)">
            <summary>
            Transforms HTML hexadecimal string (#FFFFFF) in to a Color object
            </summary>
            <param name="htmlColor">Color of the HTML.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unexpected html color string format.</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.Decimal)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.Decimal)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.Decimal)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.Decimal)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.Decimal)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.Decimal)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.Decimal)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.Decimal)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.T(System.Decimal)">
            <summary>
            Multiplies the value by 10^12 (one trillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Tera(System.Decimal)">
            <summary>
            Multiplies the value by 2^40
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Peta(System.Decimal)">
            <summary>
            Multiplies the value by 2^50
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.P(System.Decimal)">
            <summary>
            Multiplies the value by 10^15 (one quadrillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Exa(System.Decimal)">
            <summary>
            Multiplies the value by 2^60
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.E(System.Decimal)">
            <summary>
            Multiplies the value by 10^18 (one quintillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Zetta(System.Decimal)">
            <summary>
            Multiplies the value by 2^70
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Z(System.Decimal)">
            <summary>
            Multiplies the value by 10^21 (one sextillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Yotta(System.Decimal)">
            <summary>
            Multiplies the value by 2^80
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Y(System.Decimal)">
            <summary>
            Multiplies the value by 10^24 (one septillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.Double)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.Double)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.Double)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.Double)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.Double)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.Double)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.Double)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.Double)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.T(System.Double)">
            <summary>
            Multiplies the value by 10^12 (one trillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Tera(System.Double)">
            <summary>
            Multiplies the value by 2^40
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Peta(System.Double)">
            <summary>
            Multiplies the value by 2^50
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.P(System.Double)">
            <summary>
            Multiplies the value by 10^15 (one quadrillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Exa(System.Double)">
            <summary>
            Multiplies the value by 2^60
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.E(System.Double)">
            <summary>
            Multiplies the value by 10^18 (one quintillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Zetta(System.Double)">
            <summary>
            Multiplies the value by 2^70
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Z(System.Double)">
            <summary>
            Multiplies the value by 10^21 (one sextillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Yotta(System.Double)">
            <summary>
            Multiplies the value by 2^80
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Y(System.Double)">
            <summary>
            Multiplies the value by 10^24 (one septillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.To``1(System.IConvertible)">
            <summary>
            Converts the object to the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.To``1(System.IConvertible,System.IFormatProvider)">
            <summary>
            Converts the object to the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToOrDefault``1(System.IConvertible)">
            <summary>
            Converts the object to the specified type or to the default value if it cannot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToOrDefault``1(System.IConvertible,System.IFormatProvider)">
            <summary>
            Converts the object to the specified type or to the default value if it cannot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToOrValue``1(System.IConvertible,``0)">
            <summary>
            Converts the object to the specified type or to the specified value if it cannot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToOrValue``1(System.IConvertible,System.IFormatProvider,``0)">
            <summary>
            Converts the object to the specified type or to the specified value if it cannot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Epoch(System.DateTime)">
            <summary>
            just gets Epoch representation of DateTime
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToKind(System.DateTime,System.DateTimeKind)">
            <summary>
            To the kind.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="kind">The kind.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns a string representation of the time
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToFriendlyString(System.DateTime)">
            <summary>
            To the friendly string.
            </summary>
            <param name="dt">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToShortFriendlyString(System.DateTime)">
            <summary>
            To the short friendly string.
            </summary>
            <param name="dt">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds a datetime up to the time span
            </summary>
            <param name="dt">The datetime.</param>
            <param name="d">The timespan.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RoundDown(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds a datetime down to the time span.
            </summary>
            <param name="dt">The datetime.</param>
            <param name="d">The timespan.</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Determines whether the specified date falls on the specified day of the week.
            </summary>
            <param name="date">The date.</param>
            <param name="dow">The day of the week.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEndOfAccountingPeriod(System.DateTime)">
            <summary>
            Determines whether the specified date is the end of the accounting period (the last friday of the month).
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsWeekDay(System.DateTime)">
            <summary>
            Determines whether the specified date is a week day.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsToday(System.DateTime)">
            <summary>
            Determines whether the specified date is today.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsSameDate(System.DateTime,System.DateTime)">
            <summary>
            Determines whether the specified date is the same day as the utc date.
            </summary>
            <param name="date">The date.</param>
            <param name="utcDate">The UTC date.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FromUnixEpoch(System.Int64)">
            <summary>
            Converts the ticks since Epoch to a date.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToUnixEpoch(System.DateTime)">
            <summary>
            Returns the ticks since Epoch
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Enum,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
            <gist id="55ff82073abe0b2ba0fd"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttribute``1(System.Enum)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Reflection.FieldInfo,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="field">The field.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Gets field info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Determines whether the specified field has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Determines whether the specified fields has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetMimeType``1(System.IO.FileInfo)">
            <summary>
            Gets the mime type of the specified file using the specified FileTypeMap.
            </summary>
            <typeparam name="TFileTypeMap">The type of the file type map.</typeparam>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type of the specified file using the Default FileTypeMap.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            Renames the specified file.
            </summary>
            <param name="file">The file.</param>
            <param name="fileName">Name of the file. If it does not contain an extension, it will use the old extension.</param>
            <returns>The file info for the newly renamed file.</returns>
            <gist id="6d30bb5587fb13855204" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetBytes(System.IO.FileInfo)">
            <summary>
            Reads the bytes of a file and returns the bytes.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetBytes(System.IO.FileInfo,System.Int32)">
            <summary>
            Reads the bytes of a file and returns the bytes.
            </summary>
            <param name="file">The file.</param>
            <param name="maxLength">The maximum length of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Extension(System.IO.FileInfo)">
            <summary>
            Gets the extension of the specified file.
            </summary>
            <param name="file">The file.</param>
            <returns>Just the extension, there will not be a leading ".".</returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.NameWithoutExtension(System.IO.FileInfo)">
            <summary>
            Gets the file name without extension.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.Single)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.Single)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.Single)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.Single)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.Single)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.Single)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.Single)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.Single)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.T(System.Single)">
            <summary>
            Multiplies the value by 10^12 (one trillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Tera(System.Single)">
            <summary>
            Multiplies the value by 2^40
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Peta(System.Single)">
            <summary>
            Multiplies the value by 2^50
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.P(System.Single)">
            <summary>
            Multiplies the value by 10^15 (one quadrillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Exa(System.Single)">
            <summary>
            Multiplies the value by 2^60
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.E(System.Single)">
            <summary>
            Multiplies the value by 10^18 (one quintillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Zetta(System.Single)">
            <summary>
            Multiplies the value by 2^70
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Z(System.Single)">
            <summary>
            Multiplies the value by 10^21 (one sextillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Yotta(System.Single)">
            <summary>
            Multiplies the value by 2^80
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Y(System.Single)">
            <summary>
            Multiplies the value by 10^24 (one septillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToList(System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Converts the group collection to a list of group items.
            </summary>
            <param name="groups">The groups.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToArray(System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Converts the group collection to an array of group items.
            </summary>
            <param name="groups">The groups.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ForEach(System.Text.RegularExpressions.GroupCollection,System.Action{System.Text.RegularExpressions.Group})">
            <summary>
            Enumerate through each group.
            </summary>
            <param name="groups">The groups.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ForEach(System.Text.RegularExpressions.GroupCollection,System.Func{System.Text.RegularExpressions.Group,System.Boolean},System.Action{System.Text.RegularExpressions.Group})">
            <summary>
            Enumerate through each group.
            </summary>
            <param name="groups">The groups.</param>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.First(System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The group collection.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.First(System.Text.RegularExpressions.GroupCollection,System.Func{System.Text.RegularExpressions.Group,System.Boolean})">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The group collection.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrDefault(System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The group collection.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrDefault(System.Text.RegularExpressions.GroupCollection,System.Func{System.Text.RegularExpressions.Group,System.Boolean})">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The group collection.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Single(System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The group collection.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Single(System.Text.RegularExpressions.GroupCollection,System.Func{System.Text.RegularExpressions.Group,System.Boolean})">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The g.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrDefault(System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The g.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrDefault(System.Text.RegularExpressions.GroupCollection,System.Func{System.Text.RegularExpressions.Group,System.Boolean})">
            <summary>
            Gets the first match group from the specified match.
            </summary>
            <param name="g">The group collection.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEmpty(System.Guid)">
            <summary>
            Determines whether the specified unique identifier is empty.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Gets the first item in the enumeration. If it is empty, then it returns the specified value instead of the "Default".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrValue``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the first item in the enumeration. If it is empty, then it returns the specified value instead of the "Default".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Gets a Single item in the enumeration. If the enumeration is not only a single item then it returns the specified value instead of the "Default".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrValue``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets a Single item in the enumeration. If the enumeration is not only a single item then it returns the specified value instead of the "Default".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Order by the specified property ascending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Order by the specified property descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ThenBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Then order by the specified property ascending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ThenByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Then order by the specified property descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.In``1(``0,``0[])">
            <summary>
            Checks if the source is in the specified list of values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the source is in the specified list of values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.Int32)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.Int32)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.UInt32)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.UInt32)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.Int32)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.Int32)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.UInt32)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.UInt32)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.Int32)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.Int32)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.UInt32)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.UInt32)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.Int32)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.Int32)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.UInt32)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.UInt32)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Order by the specified property ascending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Order by the specified property descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Then order by the specified property ascending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Then order by the specified property descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.Int64)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.Int64)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.UInt64)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.UInt64)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.Int64)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.Int64)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Kilo(System.UInt64)">
            <summary>
            Multiplies the value by 2^10
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.K(System.UInt64)">
            <summary>
            Multiplies the value by 10^3 (one thousand)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="00deb6720cc278be8ca9" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.Int64)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.Int64)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Mega(System.UInt64)">
            <summary>
            Multiplies the value by 2^20
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.M(System.UInt64)">
            <summary>
            Multiplies the value by 10^6 (one million)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="d01704cf490ec59fc1e9" />	
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.Int64)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.Int64)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Giga(System.UInt64)">
            <summary>
            Multiplies the value by 2^30
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.B(System.UInt64)">
            <summary>
            Multiplies the value by 10^9 (one billion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="f1b33489ed80d3f8bc0f" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Tera(System.Int64)">
            <summary>
            Multiplies the value by 2^40
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.T(System.Int64)">
            <summary>
            Multiplies the value by 10^12 (one trillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Tera(System.UInt64)">
            <summary>
            Multiplies the value by 2^40
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.T(System.UInt64)">
            <summary>
            Multiplies the value by 10^12 (one trillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1061db9b00620852af88" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Peta(System.Int64)">
            <summary>
            Multiplies the value by 2^50
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.P(System.Int64)">
            <summary>
            Multiplies the value by 10^15 (one quadrillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Peta(System.UInt64)">
            <summary>
            Multiplies the value by 2^50
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.P(System.UInt64)">
            <summary>
            Multiplies the value by 10^15 (one quadrillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="c9dc04638a360990984a" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Exa(System.Int64)">
            <summary>
            Multiplies the value by 2^60
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.E(System.Int64)">
            <summary>
            Multiplies the value by 10^18 (one quintillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Exa(System.UInt64)">
            <summary>
            Multiplies the value by 2^60
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.E(System.UInt64)">
            <summary>
            Multiplies the value by 10^18 (one quintillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="2d53fbbd5442e8b731a0" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Zetta(System.UInt64)">
            <summary>
            Multiplies the value by 2^70
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Z(System.UInt64)">
            <summary>
            Multiplies the value by 10^21 (one sextillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="28b00f2ec3e2c83ef173" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Yotta(System.UInt64)">
            <summary>
            Multiplies the value by 2^80
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Y(System.UInt64)">
            <summary>
            Multiplies the value by 10^24 (one septillion)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="749614ebc92dc68211b7" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToList(System.Text.RegularExpressions.Match)">
            <summary>
            Converts the matches to a list of matches.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToArray(System.Text.RegularExpressions.Match)">
            <summary>
            Converts the matches to an array of match items
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ForEach(System.Text.RegularExpressions.Match,System.Action{System.Text.RegularExpressions.Match})">
            <summary>
            Enumerate through each match. Automatically calls NextMatch for you.
            </summary>
            <param name="m"></param>
            <param name="action">The action to execute on each match</param>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.First(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the first match item from the specified match.
            </summary>
            <param name="m">The match.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.First(System.Text.RegularExpressions.Match,System.Func{System.Text.RegularExpressions.Match,System.Boolean})">
            <summary>
            Gets the first match item from the specified match.
            </summary>
            <param name="m">The match.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrDefault(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the first match item from the specified match.
            </summary>
            <param name="m">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.FirstOrDefault(System.Text.RegularExpressions.Match,System.Func{System.Text.RegularExpressions.Match,System.Boolean})">
            <summary>
            Gets the first match item from the specified match.
            </summary>
            <param name="m">The m.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Single(System.Text.RegularExpressions.Match)">
            <summary>
            Gets a single match.
            </summary>
            <param name="m">The match.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Single(System.Text.RegularExpressions.Match,System.Func{System.Text.RegularExpressions.Match,System.Boolean})">
            <summary>
            Gets a single match.
            </summary>
            <param name="m">The match.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrDefault(System.Text.RegularExpressions.Match)">
            <summary>
            Gets a single match or a default if no match.
            </summary>
            <param name="m">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SingleOrDefault(System.Text.RegularExpressions.Match,System.Func{System.Text.RegularExpressions.Match,System.Boolean})">
            <summary>
            Gets a single match or a default if no match.
            </summary>
            <param name="m">The match.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Reflection.MemberInfo,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="member">The member.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Gets member info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="members">The members.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Determines whether the specified members has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="members">The members.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Reflection.MethodInfo,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="method">The method.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Gets method info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methods">The methods.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the method has the specified attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Determines whether all the methods in the enumeration have the specified attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methods">The methods.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsExtension(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is extension of some type.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsExtensionOf``1(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is an extension method of the specified type.
            </summary>
            <typeparam name="T">The type that it checks if it is an extension of.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ExtensionOf(System.Reflection.MethodInfo)">
            <summary>
            Gets the type that the specified method is an extension method of.
            </summary>
            <param name="method">The method.</param>
            <returns>The type that this method extends.</returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Reflection.Module,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="module">The module.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Module})">
            <summary>
            Gets module info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="modules">The modules.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Or(System.Object,System.Object)">
            <summary>
            Returns the object or the specified value object if null (or empty).
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Or(System.Guid,System.Guid)">
            <summary>
            Returns the guid or the specified value guid if empty.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Or``1(``0,``0)">
            <summary>
            Returns the object or the specified value object if null (or empty).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s">The object.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Or``1(``0,System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the object or the specified value object if test is false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s">The s.</param>
            <param name="test">The test.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Or(System.String,System.String)">
            <summary>
            Returns the string or the specified value if null (or empty).
            </summary>
            <param name="s">The string.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Or``1(System.Nullable{``0},``0)">
            <summary>
            Returns the object or the specified value object if null (or empty).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s">The nullable object.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Reflection.ParameterInfo,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="param">The parameter.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Gets parameter info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the parameter has the specified attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Determines whether the all parameters in the enumeration have the specified attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Reflection.PropertyInfo,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the expected.</typeparam>
            <param name="property">The property.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Gets property info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Determines whether the specified properties has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.AppDomain)">
            <summary>
            Gets all types that have the specified attribute
            </summary>
            <typeparam name="T">The attribute.</typeparam>
            <param name="domain">The domain.</param>
            <returns></returns>
            <gist id="41883d902a6ed6bd8da4"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetTypesThatAre``1(System.AppDomain)">
            <summary>
            Gets the types that are assignable from TType.
            </summary>
            <typeparam name="TType">The type.</typeparam>
            <param name="domain">The domain.</param>
            <returns></returns>
            <gist id="6e8707f256ad0398cbff"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require(System.Object)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="bf5ce83be2f8b47d03e8"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require(System.Object,System.String)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <param name="obj">The object.</param>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="abd4a899b9fe766184de"/>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require(System.Guid)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="bf5ce83be2f8b47d03e8"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require(System.Guid,System.String)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="message">The message.</param>
            <returns></returns>
            <gist id="abd4a899b9fe766184de" />
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require``1(``0,System.String)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The object.</param>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="abd4a899b9fe766184de"/>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>
            Requires the specified object to pass the predicate test.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The t.</param>
            <param name="test">The test must evaluate to true, or the exception will be thrown.</param>
            <param name="message">The message.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Throws if test returns false.</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Requires the specified object to pass the predicate test.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The t.</param>
            <param name="test">The test.</param>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Throws if test returns false.</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require``1(``0)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="bf5ce83be2f8b47d03e8"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require(System.String,System.String)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <param name="s">The string.</param>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="abd4a899b9fe766184de"/>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require(System.String)">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="bf5ce83be2f8b47d03e8"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require``1(System.Nullable{``0},System.String)">
            <summary>
            Requires the specified nullable object to have a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The object.</param>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="abd4a899b9fe766184de"/>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Require``1(System.Nullable{``0})">
            <summary>
            Requires the specified object to have a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <gist id="bf5ce83be2f8b47d03e8"></gist>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Int32)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero.With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Int32,System.String)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Int32,System.String)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The int.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Int32)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The int.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Int32,System.String)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The int.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Int32)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The int.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Int16)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Int16,System.String)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Int16,System.String)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Int16)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Int16,System.String)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Int16)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Int64)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Int64,System.String)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Int64,System.String)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Int64)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Int64,System.String)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Int64)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Decimal)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Decimal,System.String)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Decimal,System.String)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Decimal)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Decimal,System.String)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Decimal)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Double)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Double,System.String)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Double,System.String)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Double)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Double,System.String)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Double)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Double,System.Double,System.Double)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Single)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireZero(System.Single,System.String)">
            <summary>
            Requires the specified number to be zero.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{0}' must zero..With ( i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Single,System.String)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequirePositive(System.Single)">
            <summary>
            Requires the specified number to be a positive value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Single,System.String)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireNegative(System.Single)">
            <summary>
            Requires the specified number to be a negative value.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="param">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.RequireBetween(System.Single,System.Single,System.Single)">
            <summary>
            Requires the specified number to be between the high and low.
            </summary>
            <param name="i">The i.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value '{2}' must be a value between {0} and {1}.With ( low, high, i )</exception>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.Int16)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.Int16)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsEven(System.UInt16)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsOdd(System.UInt16)">
            <summary>
            Determines whether the specified value is odd.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Gets the byte array from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToByteArrayAsync(System.IO.Stream)">
            <summary>
            Gets the byte array from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Compress(System.IO.Stream)">
            <summary>
            Compresses the stream using GZIP compression.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CompressAsync(System.IO.Stream)">
            <summary>
            Compresses the stream using GZIP compression.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Decompress(System.IO.Stream)">
            <summary>
            Decompresses the GZIP stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.DecompressAsync(System.IO.Stream)">
            <summary>
            Decompresses the GZIP stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.With(System.String,System.Object[])">
            <summary>
            Sets the source string format with the values passed as arguments 
            </summary>
            <param name="s">The source string format.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.With(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Sets the source string format with the values passed as arguments 
            </summary>
            <param name="s">The source string format.</param>
            <param name="culture">The culture info
            .</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Match(System.String,System.String)">
            <summary>
            Performs a Regular Expression Match.
            </summary>
            <param name="s">The string to match.</param>
            <param name="pattern">The pattern.</param>
            <returns>The regular expression match.</returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Performs a Regular Expression Match.
            </summary>
            <param name="s">The string to match.</param>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsMatch(System.String,System.String)">
            <summary>
            Determines whether the specified string is match to the specified pattern.
            </summary>
            <param name="s">The string to match.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Determines whether the specified string is match to the specified pattern.
            </summary>
            <param name="s">The string to match.</param>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Does a Regex Replace on the string based on the specified pattern and the specified replacement.
            </summary>
            <param name="s">The string.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Does a Regex Replace on the string based on the specified pattern and the specified replacement.
            </summary>
            <param name="s">The s.</param>
            <param name="pattern">The pattern.</param>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Replace(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Does a Regex Replace on the string based on the specified pattern and the specified evaluator.
            </summary>
            <param name="s">The s.</param>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.REReplace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Does a Regex Replace on the specified string based on the specified pattern and replacement.
            </summary>
            <param name="s">The string.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.REReplace(System.String,System.String,System.String)">
            <summary>
            Does a Regex Replace on the specified string based on the specified pattern and replacement.
            </summary>
            <param name="s">The string.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.REReplace(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Does a Regex Replace on the string based on the specified pattern and the specified evaluator.
            </summary>
            <param name="s">The string.</param>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.REReplace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Does a Regex Replace on the string based on the specified pattern and the specified evaluator.
            </summary>
            <param name="s">The string.</param>
            <param name="pattern">The pattern.</param>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Gets the bytes from the specified string.
            </summary>
            <param name="s">The string.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetBytes(System.String)">
            <summary>
            Gets the bytes from the specified string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Slug(System.String)">
            <summary>
            Converts a string to a URL friendly value
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <see cref="!:http://stackoverflow.com/questions/25259/how-do-you-include-a-webpage-title-as-part-of-a-webpage-url"/>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToCamelCase(System.Object)">
            <summary>
            Converts the objects string representation to camelCase.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the objects string representation to camelCase.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the objects string representation to PascalCase.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SplitAndTrim(System.String,System.Char[],System.StringSplitOptions)">
            <summary>
            Splits the string based on the specified separator and trims each item.
            </summary>
            <param name="input">The input.</param>
            <param name="separator">The separator.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.SplitAndTrim(System.String,System.Char[])">
            <summary>
            Splits the string based on the specified separator and trims each item.
            </summary>
            <param name="input">The input.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToDatabaseHash(System.String)">
            <summary>
            Converts the string to an SHA1 hash
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks><![CDATA[This is the equivalent of <code>CAST(HASHBYTES('SHA1', RTRIM(LTRIM(LOWER([COLUMN_NAME])))) AS VARBINARY(20))</code> in TSQL.]]></remarks>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToBase64String(System.String)">
            <summary>
            Base64 Encodes the specified string.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            Base64 Encodes the specified string.
            </summary>
            <param name="input">The input.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HtmlEncode(System.String)">
            <summary>
            HTML encodes the input string
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML encodes the input string
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.UrlEncode(System.String)">
            <summary>
            Url encodes the input string
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HtmlDecode(System.String)">
            <summary>
            Decodes the HTML encoded input string
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes the HTML encoded input string
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.UrlDecode(System.String)">
            <summary>
            Decodes a url encoded input string
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the input string to the maximum length.
            </summary>
            <param name="input">The input.</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified type is primitive.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Is``1(System.Object)">
            <summary>
            Determines whether the Type is the specified type to check for.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.Is``1(System.Type)">
            <summary>
            Determines whether the Type is the specified type to check for.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="t">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value of the type.
            </summary>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttribute``1(System.Type)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetCustomAttributeValue``2(System.Type,System.Func{``0,``1})">
            <summary>
            Gets the custom attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Expected">The type of the Expected.</typeparam>
            <param name="type">The type.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets types that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetMethodsOfReturnType``1(System.Type)">
            <summary>
            Gets the methods that have the specified return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.GetMethodsOfReturnType``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the methods that have the specified return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Type)">
            <summary>
            Determines whether the specified type has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.HasAttribute``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines whether the specified types has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.QualifiedName(System.Type)">
            <summary>
            Gets the fully qualified name of the type
            </summary>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CreateInstance``1(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The type.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates the instance.
            </summary>
            <param name="t">The t.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Extensions.CamalotCommonExtensions.CreateConfigurationInstanceFromConfigurationNode``1(System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section">Section XML node.</param>
            <returns>
            The created section handler object.
            </returns>
            <exception cref="T:System.ArgumentException">Unknown Xml Node Type</exception>
            <ignore>true</ignore>
        </member>
        <member name="T:Camalot.Common.Mime.FileTypeMap">
            <summary>
            A default file type map handler.
            </summary>
        </member>
        <member name="M:Camalot.Common.Mime.FileTypeMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Camalot.Common.Mime.FileTypeMap"/> class.
            </summary>
        </member>
        <member name="M:Camalot.Common.Mime.FileTypeMap.#cctor">
            <summary>
            Initializes the <see cref="T:Camalot.Common.Mime.FileTypeMap"/> class.
            </summary>
        </member>
        <member name="M:Camalot.Common.Mime.FileTypeMap.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type of the file.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Mime.FileTypeMap.GetMimeType(System.String)">
            <summary>
            Gets the mime type of the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Mime.FileTypeMap.GetAllMimeTypes">
            <summary>
            Gets all MimeTypes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Camalot.Common.Mime.FileTypeMap.DefaultFileTypeMap">
            <summary>
            Gets the default file type map.
            </summary>
            <value>
            The default file type map.
            </value>
        </member>
        <member name="P:Camalot.Common.Mime.FileTypeMap.DefaultMimeType">
            <summary>
            Gets the default mimetype if it is unknown.
            </summary>
            <value>
            The default type of the MIME.
            </value>
        </member>
        <member name="T:Camalot.Common.Mime.ApacheFileTypeMap">
            <summary>
            This reads http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types and builds a list of mimeTypes that can be queried against.
            </summary>
            <seealso cref="!:http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types">Apache Mime Types</seealso>
        </member>
        <member name="M:Camalot.Common.Mime.ApacheFileTypeMap.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type of the file.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <seealso cref="M:Camalot.Common.Mime.FileTypeMap.GetMimeType"/>
        </member>
        <member name="M:Camalot.Common.Mime.ApacheFileTypeMap.GetMimeType(System.String)">
            <summary>
            Gets the mime type of the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <seealso cref="M:Camalot.Common.Mime.FileTypeMap.GetAllMimeTypes"/>
        </member>
        <member name="M:Camalot.Common.Mime.ApacheFileTypeMap.GetAllMimeTypes">
            <summary>
            Gets all MimeTypes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Mime.ApacheFileTypeMap.CheckCache">
            <summary>
            Checks the cache to see if it has been retrieved.
            </summary>
        </member>
        <member name="T:Camalot.Common.Mime.ApacheFileTypeMap.ApacheMimeTypesFileReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Camalot.Common.Mime.ApacheFileTypeMap.ApacheMimeTypesFileReader.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Camalot.Common.Mime.MimeType">
            <summary>
            Represents a Mime Type
            </summary>
        </member>
        <member name="P:Camalot.Common.Mime.MimeType.MediaType">
            <summary>
            Gets or sets the type of the media.
            </summary>
            <value>
            The type of the media.
            </value>
        </member>
        <member name="P:Camalot.Common.Mime.MimeType.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="T:Camalot.Common.Mime.RegistryFileTypeMap">
            <summary>
            Reads the system registry for information on the mime types of a file.
            </summary>
        </member>
        <member name="M:Camalot.Common.Mime.RegistryFileTypeMap.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type of the file.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Mime.RegistryFileTypeMap.GetMimeType(System.String)">
            <summary>
            Gets the mime type of the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Mime.RegistryFileTypeMap.GetAllMimeTypes">
            <summary>
            Gets all MimeTypes that are registered.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Camalot.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.AntiForgeryToken_InvalidMethod">
            <summary>
              Looks up a localized string similar to Method not allowed..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.AntiForgeryToken_ValidationFailed">
            <summary>
              Looks up a localized string similar to A required anti-forgery token was not supplied or was invalid..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Color_UnexpectedFormat">
            <summary>
              Looks up a localized string similar to Unexpected html color string format..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Common_NullOrEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be null or empty..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_Friendly1Day">
            <summary>
              Looks up a localized string similar to a day ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_Friendly1Hour">
            <summary>
              Looks up a localized string similar to an hour ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_Friendly1Minute">
            <summary>
              Looks up a localized string similar to a minute ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_Friendly1Month">
            <summary>
              Looks up a localized string similar to a month ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_Friendly1Week">
            <summary>
              Looks up a localized string similar to a week ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_Friendly1Year">
            <summary>
              Looks up a localized string similar to a year ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyDay_Short">
            <summary>
              Looks up a localized string similar to d.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyDays">
            <summary>
              Looks up a localized string similar to {0} days ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyHour_Short">
            <summary>
              Looks up a localized string similar to h.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyHours">
            <summary>
              Looks up a localized string similar to {0} hours ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyMinute_Short">
            <summary>
              Looks up a localized string similar to m.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyMinutes">
            <summary>
              Looks up a localized string similar to {0} minutes ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyMonth_Short">
            <summary>
              Looks up a localized string similar to M.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyMonths">
            <summary>
              Looks up a localized string similar to {0} months ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyNow">
            <summary>
              Looks up a localized string similar to just now.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyNow_Short">
            <summary>
              Looks up a localized string similar to now.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyWeek_Short">
            <summary>
              Looks up a localized string similar to w.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyWeeks">
            <summary>
              Looks up a localized string similar to {0} weeks ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyYear_Short">
            <summary>
              Looks up a localized string similar to y.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Date_FriendlyYears">
            <summary>
              Looks up a localized string similar to {0} years ago.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.JsonP_InvalidIdentifier">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not valid for a jsonp callback identifier..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Require_Between">
            <summary>
              Looks up a localized string similar to Value &apos;{2}&apos; must be a value between {0} and {1}..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Require_Zero">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; must zero..
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Sequence_Empty">
            <summary>
              Looks up a localized string similar to Sequence contains no elements.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.Sequence_MoreTanOne">
            <summary>
              Looks up a localized string similar to Sequence contains more than one element.
            </summary>
        </member>
        <member name="P:Camalot.Common.Properties.Resources.XmlNode_UnknownNodeType">
            <summary>
              Looks up a localized string similar to Unknown Xml Node Type.
            </summary>
        </member>
        <member name="T:Camalot.Common.Serialization.Converters.GuidConverter">
            <summary>
            Converts Guids when Reading/Writing JSON
            </summary>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.GuidConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.GuidConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.Exception">Expected guid object value.</exception>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.GuidConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Camalot.Common.Serialization.Converters.HtmlColorConverter">
            <summary>
            Converts Html Colors when reading / writing JSON.
            </summary>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.HtmlColorConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.HtmlColorConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.ArgumentException">Unexpected token parsing color. Expected string, got {0}. {1}.With (
            						reader.TokenType )</exception>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.HtmlColorConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.ArgumentException">Expected token parsing color, expected Color, got {0}..With ( value.GetType ( ).Name )</exception>
        </member>
        <member name="T:Camalot.Common.Serialization.Converters.UnixDateTimeConverter">
            <summary>
            Converts DateTime to Unix DateTime when reading / writing JSON.
            </summary>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.UnixDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Camalot.Common.Serialization.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.Exception">Expected date object value.</exception>
        </member>
        <member name="T:Camalot.Common.Serialization.JsonSerializationBuilder">
            <summary>
            A JSON Serialization Builder
            </summary>
        </member>
        <member name="M:Camalot.Common.Serialization.JsonSerializationBuilder.Settings``1(System.Linq.Expressions.Expression{System.Func{Newtonsoft.Json.JsonSerializerSettings,``0}},``0)">
            <summary>
            Sets the setting to the specified value
            </summary>
            <typeparam name="V"></typeparam>
            <param name="xpression">The expression.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <gist id="1bef086cc9057b9f8987"></gist>
        </member>
        <member name="M:Camalot.Common.Serialization.JsonSerializationBuilder.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
            <gist id="1bef086cc9057b9f8987"></gist>
        </member>
        <member name="M:Camalot.Common.Serialization.JsonSerializationBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
            <gist id="1bef086cc9057b9f8987"></gist>
        </member>
        <member name="T:Camalot.Common.Serialization.XmlSerializationBuilder">
            <summary>
            An Xml Serialization Builder
            </summary>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Camalot.Common.Serialization.XmlSerializationBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.Build``1">
            <summary>
            Start the building of the Xml Serializer
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.Build(System.Type)">
            <summary>
            Start the building of the Xml Serializer
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.AddType``1">
            <summary>
            Adds the type to the builder for a supported serialization type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.AddType(System.Type)">
            <summary>
            Adds the type to the builder for a supported serialization type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.SetDefaultNamespace(System.String)">
            <summary>
            Sets the default xml namespace.
            </summary>
            <param name="ns">The namespace to set as the default.</param>
            <returns></returns>
        </member>
        <member name="M:Camalot.Common.Serialization.XmlSerializationBuilder.Create">
            <summary>
            Creates an instance of an XML Serializer with the options set from the builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Camalot.Common.Serialization.XmlSerializationBuilder.DefaultNamespace">
            <summary>
            Gets or sets the default namespace.
            </summary>
            <value>
            The default namespace.
            </value>
        </member>
        <member name="P:Camalot.Common.Serialization.XmlSerializationBuilder.BaseType">
            <summary>
            Gets or sets the type of the base.
            </summary>
            <value>
            The type of the base.
            </value>
        </member>
        <member name="P:Camalot.Common.Serialization.XmlSerializationBuilder.Types">
            <summary>
            Gets or sets the types.
            </summary>
            <value>
            The types.
            </value>
        </member>
    </members>
</doc>
