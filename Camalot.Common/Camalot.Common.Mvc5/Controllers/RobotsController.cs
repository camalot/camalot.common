using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using Camalot.Common.Extensions;
using Camalot.Common.Mime;
using Camalot.Common.Mvc.Attributes;
using Camalot.Common.Mvc.Extensions;
using MoreLinq;

namespace Camalot.Common.Mvc.Controllers {
	/// <summary>
	/// Serves up the route /robots.txt
	/// </summary>
	/// <gist id="5eb2b71f8c503312ea8d">Disallow an entire Area Registration</gist>
	/// <gist id="dc6bff55bf8e3545cdd3">Disallow an entire Controller</gist>
	/// <gist id="67b52bc676b3f036d980">Disallow a specific Action within a Controller</gist>
	/// <gist id="56cfb749d29235fb61e1">Setup the web.config for handling the robots.txt requests.</gist>
	/// <gist id="20c736abe3a6ec0016cb">Global.asax setup.</gist>
	/// <see cref="Camalot.Common.Mvc.Attributes.RobotsDisallowAttribute"/>
	/// <see cref="Camalot.Common.Mvc.Configuration.RobotsRouteConfiguration"/>
	public class RobotsController : Controller {
		/// <summary>
		/// Initializes a new instance of the <see cref="RobotsController"/> class.
		/// </summary>
		public RobotsController() {
			AreaNamespaces = new Dictionary<string,string>();
			Assemblies = AppDomain.CurrentDomain.GetAssemblies().Where(m => !m.IsDynamic);
		}
		private IDictionary<string,string> AreaNamespaces { get; set; }
		private IEnumerable<Assembly> Assemblies { get; set; }
		/// <summary>
		/// Dynamically generates /robots.txt based on the RobotsDisallowAttribute
		/// </summary>
		/// <returns></returns>
		/// <see cref="Camalot.Common.Mvc.Attributes.RobotsDisallowAttribute"/>
		/// <see cref="Camalot.Common.Mvc.Controllers.RobotsController"/>
		/// <see cref="Camalot.Common.Mvc.Configuration.RobotsRouteConfiguration"/>
		/// <ignore>true</ignore>
		public ActionResult Index() {

			var disallow = GetDisallowedRegisteredAreas()
				.Union(GetDisallowedControllers())
				.Union(GetDisallowedActions())
				.Union(new string[] { "/elmah.axd", "/glimpse.axd", "/admin"})
				.Where(d => !string.IsNullOrWhiteSpace(d));

			var robotsTxt = new StringBuilder();
			robotsTxt.AppendLine("# robots.txt generated by Camalot.Common.Mvc (http://camalotcommon.bit13.com/)");
			robotsTxt.AppendLine();
			robotsTxt.AppendLine("User-agent: *");

			disallow.ForEach(d => {
				robotsTxt.AppendLine("Disallow: {0}".With(d));
			});
			return new FileContentResult(robotsTxt.ToString().GetBytes(), "plain/text");
		}

		private IEnumerable<string> GetDisallowedRegisteredAreas() {
			var disallows = new List<string>();
			foreach(var area in Assemblies.SelectMany(asm => asm.GetTypesThatAre<AreaRegistration>()).Where(t => t.HasAttribute<RobotsDisallowAttribute>())) {
				var instance = (AreaRegistration)Activator.CreateInstance(area);
				var url = Url.Action("", new {controller = "", area = instance.AreaName });
				AreaNamespaces.Add(area.Namespace, instance.AreaName);
				disallows.Add(url.ToLowerInvariant());
			}
			return disallows;
		}

		private IEnumerable<string> GetDisallowedControllers() {
			var disallows = new List<string>();
			foreach(var controller in Assemblies.SelectMany(asm => asm.GetTypesThatAre<Controller>()).Where(c => c.HasAttribute<RobotsDisallowAttribute>())) {
				var controllerName = controller.Name;
				var attr = controller.GetCustomAttribute<RobotsDisallowAttribute>();
				controllerName = controllerName.Substring(0, controllerName.Length - "Controller".Length);
				var areaName = attr.Area;
				// find the area name?
				if(AreaNamespaces.ContainsKey(controller.Namespace)) {
					areaName = AreaNamespaces[controller.Namespace];
				}

				var url = Url.Action("", new {controller = controllerName, area = areaName });
				disallows.Add(url.ToLowerInvariant());

			}
			return disallows;
		}

		private IEnumerable<string> GetDisallowedActions() {
			var disallows = new List<string>();
			foreach(var controller in Assemblies.SelectMany(asm => asm.GetTypesThatAre<Controller>()).Where(c => !c.HasAttribute<RobotsDisallowAttribute>())) {
				var controllerName = controller.Name;
				controllerName = controllerName.Substring(0, controllerName.Length - "Controller".Length);

				var areaName = "";
				// find the area name?
				if(AreaNamespaces.ContainsKey(controller.Namespace)) {
					areaName = AreaNamespaces[controller.Namespace];
				}

				foreach(var actionMethod in controller.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(m => m.HasAttribute<RobotsDisallowAttribute>())) {
					var attr = actionMethod.GetCustomAttribute<RobotsDisallowAttribute>();
					if(!string.IsNullOrWhiteSpace(attr.Area) && !string.IsNullOrWhiteSpace(areaName)) {
						areaName = attr.Area;
					}
					var action = Url.Action(actionMethod.Name, new { controller = controllerName, area = areaName });
					disallows.Add(action.ToLowerInvariant());
				}
			}
			return disallows;
		}
	}
}
